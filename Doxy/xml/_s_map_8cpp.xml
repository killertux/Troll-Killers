<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="_s_map_8cpp" kind="file" language="C++">
    <compoundname>SMap.cpp</compoundname>
    <includes refid="_s_map_8hpp" local="yes">SMap.hpp</includes>
    <incdepgraph>
      <node id="1953">
        <label>stdint.h</label>
      </node>
      <node id="1951">
        <label>Enums.hpp</label>
        <link refid="_enums_8hpp"/>
      </node>
      <node id="1952">
        <label>_object.hpp</label>
        <link refid="__object_8hpp"/>
        <childnode refid="1953" relation="include">
        </childnode>
      </node>
      <node id="1958">
        <label>fstream</label>
      </node>
      <node id="1950">
        <label>Map.hpp</label>
        <link refid="_map_8hpp"/>
        <childnode refid="1951" relation="include">
        </childnode>
        <childnode refid="1952" relation="include">
        </childnode>
        <childnode refid="1954" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1958" relation="include">
        </childnode>
      </node>
      <node id="1954">
        <label>_data.hpp</label>
        <link refid="__data_8hpp"/>
        <childnode refid="1953" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
      </node>
      <node id="1956">
        <label>sstream</label>
      </node>
      <node id="1949">
        <label>SMap.hpp</label>
        <link refid="_s_map_8hpp"/>
        <childnode refid="1950" relation="include">
        </childnode>
      </node>
      <node id="1957">
        <label>Defines.hpp</label>
        <link refid="_defines_8hpp"/>
      </node>
      <node id="1955">
        <label>cstring</label>
      </node>
      <node id="1948">
        <label>/home/clemente/projects/Troll-Killers/SMap.cpp</label>
        <link refid="SMap.cpp"/>
        <childnode refid="1949" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_s_map_8hpp" kindref="compound">SMap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="class_s_map_1a6ef62d8e6b17c21f21c535a4139e230e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_map_1a6ef62d8e6b17c21f21c535a4139e230e" kindref="member">SMap::calculateSpawn</ref>(){</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/>nSpawn=0;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnCounter=0;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=0;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="class_map_1ad428bf938f205ed6d1e7af2ddd09b7ce" kindref="member">n_object</ref>;i++)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_map_1a1028fa8db721f28473ba471ae70fde09" kindref="member">objects</ref>[i].<ref refid="class_map_1a6e7ba89e3a0a05633ae7d27dd400190f" kindref="member">type</ref>==<ref refid="_enums_8hpp_1a842c5e2e69277690b064bf363c017980aa79c827759ea48f0735386c4b1188911" kindref="member">CIRCLE</ref>)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nSpawn++;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnList=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct__object" kindref="compound">_object</ref>*[nSpawn];</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>inUse=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[nSpawn];</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="class_map_1ad428bf938f205ed6d1e7af2ddd09b7ce" kindref="member">n_object</ref>;i++)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_map_1a1028fa8db721f28473ba471ae70fde09" kindref="member">objects</ref>[i].<ref refid="class_map_1a6e7ba89e3a0a05633ae7d27dd400190f" kindref="member">type</ref>==<ref refid="_enums_8hpp_1a842c5e2e69277690b064bf363c017980aa79c827759ea48f0735386c4b1188911" kindref="member">CIRCLE</ref>){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnList[c]=&amp;<ref refid="class_map_1a1028fa8db721f28473ba471ae70fde09" kindref="member">objects</ref>[i];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inUse[c]=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c++;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_s_map_1a3577067cfaf16adb3afd60c30f7093b7" refkind="member"><highlight class="normal"><ref refid="struct__object" kindref="compound">_object</ref>*<sp/><ref refid="class_s_map_1a3577067cfaf16adb3afd60c30f7093b7" kindref="member">SMap::getSpaw</ref>(){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">_object</ref><sp/>*rtrn=spawnList[spawnCounter];</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnCounter++;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(spawnCounter&gt;=nSpawn)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spawnCounter=0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rtrn;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="class_s_map_1a951815986813fc94884108ee2b72a4f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_map_1a951815986813fc94884108ee2b72a4f1" kindref="member">SMap::useSpawn</ref>(<ref refid="struct__object" kindref="compound">_object</ref><sp/>*spawn){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;nSpawn;i++)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(spawn==spawnList[i])</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inUse[i])</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inUse[i]=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/clemente/projects/Troll-Killers/SMap.cpp"/>
  </compounddef>
</doxygen>
